/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy project to get you started.
 * For more details take a look at the Groovy Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.1.1/userguide/tutorial_groovy_projects.html
 */

plugins {
    // Apply the groovy plugin to add support for Groovy
    id 'groovy'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    // Apply license header
    id 'com.github.hierynomus.license' version '0.15.0'

    // Gradle github pages plugin
    id 'org.ajoberstar.git-publish' version '2.1.3'

    id 'checkstyle' // checks the code style
    id 'com.github.spotbugs' version '2.0.1' // checks for bugs
    id 'jacoco'
    id 'pmd'

    // GitHub Package Publishing
    id 'maven-publish'

    // ActiveJDBC instrumentation plugin
    id 'de.schablinski.activejdbc-gradle-plugin' version '1.5.2'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // Use the latest Groovy version for building this library
    implementation 'org.codehaus.groovy:groovy-all:2.5.8'

    // Use the awesome Spock testing and specification framework
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'

    //ActiveJDBC
    implementation 'org.javalite:activejdbc:2.3'
    implementation 'org.javalite:javalite-common:2.3'
    implementation 'org.codehaus.groovy:groovy:2.4.15'
    implementation 'org.javalite:activejdbc:2.3'
    activejdbc 'org.codehaus.groovy:groovy:2.4.15'

    // JDBC driver for sqlite
    implementation 'org.xerial:sqlite-jdbc:3.25.2'
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.2.4'
    implementation 'postgresql:postgresql:9.1-901.jdbc4'
    implementation 'mysql:mysql-connector-java:8.0.18'

    // Javalin
    implementation 'io.javalin:javalin:3.3.0'
    implementation "org.slf4j:slf4j-simple:1.7.26"

    // Jaxson XML
    implementation "org.codehaus.jackson:jackson-core-asl:1.8.2"
    implementation "org.codehaus.jackson:jackson-mapper-asl:1.8.2"
    
    // testing
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    testImplementation 'org.mockito:mockito-core:3.2.4'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.2.4'
}

//checkstyle {
//    toolVersion '7.8.1'
//    configFile file("conf/checkstyle/checkstyle.xml")
//}
//
//checkstyleMain {
//    source = 'src/main/groovy'
//}
//
//checkstyleTest {
//    source = 'src/test/groovy'
//}

jacoco {
    toolVersion = '0.8.5'
}

test {
    useJUnitPlatform()
}

spotbugs {
    effort = "max"
    reportLevel = "low"
    includeFilter = file("conf/spotbugs/excludes.xml")
}

gitPublish {
    // where to publish to (repo must exist)
    repoUri = 'https:://github.com/xrese/base-server.git'
    // (or 'https://github.com/ajoberstar/test-repo.git', depending on authentication)

    // where to fetch from prior to fetching from the remote (i.e. a local repo to save time)
    referenceRepoUri = 'file:///home/human/projects/test-repo/'

    // branch will be created if it doesn't exist
    branch = 'gh-pages'

    // generally, you don't need to touch this
    repoDir = file("$buildDir/gitPublish") // defaults to $buildDir/gitPublish

    // what to publish, this is a standard CopySpec
    contents {
        from 'src/pages'
        from(javadoc) {
            into 'api'
        }
    }

    // what to keep in the existing branch (include=keep)
    preserve {
        include '1.0.0/**'
        exclude '1.0.0/temp.txt'
    }

    // message used when committing changes
    commitMessage = 'Publishing a new page' // defaults to 'Generated by gradle-git-publish'
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/xrese/base-server")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId = 'edu.isu.xrese'
            artifactId = 'base-server'
            version = '1.0.1'
            pom {
                name = 'XRESE Basic Microservice Server'
                description = ''

                license {
                    license {
                        name = 'MIT Licnese'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'grifisaa'
                        name = 'Isaac D Griffith'
                        email = 'grifisaa@isu.edu'
                    }
                }
            }

            from(components.java)
        }
    }
}

groovydoc {
    source = sourceSets.main.allSource
    windowTitle = 'XRESE - Base Server'
    docTitle = "Baser Server ${project.version} API"
    destinationDir = file('docs/javadoc')
}

activejdbc.toolVersion = "2.3"

project.version = "1.0.1"
